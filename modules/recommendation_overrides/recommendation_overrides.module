<?php
/**
 * @file
 * Code for the Recommendation Overrides feature.
 */

include_once 'recommendation_overrides.features.inc';

/**
 * Retrieve all loaded override nodes.
 *
 * @return mixed
 */
function recommendation_overrides_get_nodes() {
  $nids = recommendation_overrides_get_nids();
  return node_load_multiple($nids);
}

/**
 * Get all recommendation_overrides nids.
 *
 * @return array
 */
function recommendation_overrides_get_nids() {
  $nids = array();

  $results = db_query('select nid from {node} where type = :type and status = :status', array(":type" => "recommendation_overrides", "status" => 1))->fetchAll();
  foreach($results as $result) {
    $nids[] = $result->nid;
  }

  return $nids;
}

/**
 * @param $recommendation_nodes
 *
 * @return array
 *   Recommendation nodes with overrides applied as appropriate.
 */
function recommendation_overrides_enforce_overrides(array $recommendation_nodes) {
  $overrides_nodes = recommendation_overrides_get_nodes();

  if (empty($overrides_nodes)) {
    // Nothing to override here.
    return $recommendation_nodes;
  }

  $overrides_loops = 0;
  $new_overrides_count = 0;
  $loop_limit = 5;
  while ($overrides_loops == 0 || $overrides_loops < $loop_limit && $new_overrides_count > 0) {

    $new_overrides_count = 0;
    foreach ($overrides_nodes as $overrides_node) {

      // Get fresh list of recommendation nids, taking into account any overrides
      // already applied to $recommendation_nodes.
      $recommendation_nids = recommendation_overrides_get_nids_from_nodes($recommendation_nodes);

      // Test.
      $overrides_are_necessary = recommendation_overrides_are_necessary($recommendation_nids, $overrides_node);
      if (!$overrides_are_necessary) {
        // Test did not pass. Move on to next override check.
        continue;
      }
      $new_overrides_count++;

      // Suppress.
      $nids_to_suppress = recommendation_overrides_get_nids_to_suppress_from_overrides_node($overrides_node);
      foreach ($nids_to_suppress as $nid) {
        unset($recommendation_nodes[$nid]);
      }

      // Suggest.
      $nids_to_suggest = recommendation_overrides_get_nids_to_suggest_from_overrides_node($overrides_node);
      $new_recommendation_nodes = node_load_multiple($nids_to_suggest);
      foreach ($nids_to_suggest as $nid) {
        $recommendation_nodes[$nid] = $new_recommendation_nodes[$nid];
      }

      // Drupal set messages.
      $notice_messages = recommendation_overrides_get_notice_messages_from_overrides_node($overrides_node);
      foreach ($notice_messages as $message) {
        drupal_set_message($message, 'notice');
      }

      $error_messages = recommendation_overrides_get_error_messages_from_overrides_node($overrides_node);
      foreach ($error_messages as $message) {
        drupal_set_message($message, 'error');
      }

    } // end foreach

    $overrides_loops++;
    /*
    // @TODO It seems like the overrides should become unnecessary. This would require some additional fine tuning.
    if ($overrides_loops == $loop_limit && $new_overrides_count > 0) {
      drupal_set_message("After {$loop_limit} passes through all the overrides, there are still new overrides. You probably have two conflicting overrides somewhere.", 'error');
    }
    // */

  } // end while

  return $recommendation_nodes;
}

function recomendation_overrides_get_nids_from_overrides_node($overrides_node) {
  return recommendation_overrides_get_referenced_nids_from_field_in_node('field_recommendations_to_overrid', $overrides_node);
}

function recommendation_overrides_get_nids_from_nodes(array $nodes) {
  $nids = array();

  foreach($nodes as $node) {
    $nids[$node->nid] = $node->nid;
  }

  return $nids;
}

/**
 * Return nids from an entityreference field.
 *
 * @param $field_name
 * @return array
 */
function recommendation_overrides_get_referenced_nids_from_field_in_node($field_name, $overrides_node) {
  $nids = array();

  foreach ($overrides_node->{$field_name}['und'] as $entityreference) {
    foreach ($entityreference as $nid) {
      $nids[] = $nid;
    }
  }

  return $nids;
}

/**
 * @param array $recommendation_nids
 *   nids from recommendation nodes
 *
 * @param array $overrides_node
 *   Node containing override rules and conditions.
 *
 * @return bool
 */
function recommendation_overrides_are_necessary(array $recommendation_nids, stdClass $overrides_node) {
  // Get conditions to trigger an override. If recommendation includes ANY nids
  // from group 1 AND ANY form group 2, an override is required.
  $criteria_1_nids = recommendation_overrides_get_referenced_nids_from_field_in_node('field_recommendations_to_overrid', $overrides_node);
  $criteria_2_nids = recommendation_overrides_get_referenced_nids_from_field_in_node('field_recommendations_to_overri2', $overrides_node);

  // Test.
  $criteria1 = recommendation_overrides_test_criteria_against_recommendations($criteria_1_nids, $recommendation_nids);
  $criteria2 = recommendation_overrides_test_criteria_against_recommendations($criteria_2_nids, $recommendation_nids);

  // If both criteria are met, overrides are necessary, return TRUE.
  if ($criteria1 && $criteria2) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Test recommendations for ANY of the possible criteria nids.
 *
 * @param $criteria_nids
 * @param $recommendation_nids
 * @return bool
 */
function recommendation_overrides_test_criteria_against_recommendations($criteria_nids, $recommendation_nids) {
  $test_result = FALSE;

  foreach ($criteria_nids as $nid) {
    if (in_array($nid, $recommendation_nids)) {
      $test_result = TRUE;
      break;
    }
  }

  return $test_result;
}

function recommendation_overrides_get_nids_to_suppress_from_overrides_node($overrides_node) {
  return recommendation_overrides_get_referenced_nids_from_field_in_node('field_recommendations_to_supress', $overrides_node);
}

function recommendation_overrides_get_nids_to_suggest_from_overrides_node($overrides_node) {
  return recommendation_overrides_get_referenced_nids_from_field_in_node('field_recommendations_to_suggest', $overrides_node);
}

function recommendation_overrides_get_notice_messages_from_overrides_node($overrides_node) {
  $messages = array();

  if (empty($overrides_node->field_override_notice_message)) {
    return $messages;
  }

  foreach ($overrides_node->field_override_notice_message['und'] as $notice_messages) {
    $messages[] = $notice_messages['safe_value'];
  }

  return $messages;
}

function recommendation_overrides_get_error_messages_from_overrides_node($overrides_node) {
  $messages = array();

  if (empty($overrides_node->field_override_error_message)) {
    return $messages;
  }

  foreach ($overrides_node->field_override_error_message['und'] as $error_messages) {
    $messages[] = $error_messages['safe_value'];
  }

  return $messages;
}
